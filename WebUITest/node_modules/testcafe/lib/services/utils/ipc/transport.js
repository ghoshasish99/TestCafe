"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const io_1 = require("./io");
const async_event_emitter_1 = __importDefault(require("../../../../src/utils/async-event-emitter"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const interfaces_1 = require("./interfaces");
class HostTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncStream) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.AsyncReader(syncStream);
        this.syncWriter = new io_1.AsyncWriter(syncStream);
        this.readers = [this.asyncReader, this.syncReader];
    }
    read() {
        this.readers.forEach(reader => reader.on('data', data => this.emit('data', data)));
    }
    async write(message) {
        const writer = message.sync ? this.syncWriter : this.asyncWriter;
        await writer.write(message);
    }
    readSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
    writeSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
}
exports.HostTransport = HostTransport;
class ServiceTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncFd) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.SyncReader(syncFd);
        this.syncWriter = new io_1.SyncWriter(syncFd);
    }
    read() {
        this.asyncReader.on('data', data => this.emit('data', data));
    }
    async write(message) {
        await this.asyncWriter.write(message);
    }
    readSync() {
        const message = this.syncReader.readSync();
        if (!interfaces_1.isIPCResponsePacket(message))
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.malformedIPCMessage);
        return message;
    }
    writeSync(message) {
        this.syncWriter.writeSync(message);
    }
}
exports.ServiceTransport = ServiceTransport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3V0aWxzL2lwYy90cmFuc3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBd0U7QUFDeEUsb0dBQXFFO0FBQ3JFLHFEQUF1RDtBQUN2RCxpREFBdUQ7QUFDdkQsNkNBQStGO0FBRy9GLE1BQWEsYUFBYyxTQUFRLDZCQUFZO0lBUTNDLFlBQW9CLFdBQWtDLEVBQUUsWUFBbUMsRUFBRSxVQUF5RDtRQUNsSixLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxnQkFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxnQkFBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxnQkFBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxnQkFBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUUsT0FBa0I7UUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUVqRSxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVNLFNBQVM7UUFDWixNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztDQUNKO0FBckNELHNDQXFDQztBQUdELE1BQWEsZ0JBQWlCLFNBQVEsNkJBQVk7SUFNOUMsWUFBb0IsV0FBa0MsRUFBRSxZQUFtQyxFQUFFLE1BQWM7UUFDdkcsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksZ0JBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksZ0JBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxlQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE9BQWtCO1FBQ2xDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxnQ0FBbUIsQ0FBQyxPQUFPLENBQUM7WUFDN0IsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRS9ELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTSxTQUFTLENBQUUsT0FBa0I7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKO0FBcENELDRDQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUmVhZGVyLCBBc3luY1dyaXRlciwgU3luY1JlYWRlciwgU3luY1dyaXRlciB9IGZyb20gJy4vaW8nO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi8uLi8uLi9zcmMvdXRpbHMvYXN5bmMtZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBSVU5USU1FX0VSUk9SUyB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycy90eXBlcyc7XG5pbXBvcnQgeyBJUENQYWNrZXQsIElQQ1Jlc3BvbnNlUGFja2V0LCBJUENUcmFuc3BvcnQsIGlzSVBDUmVzcG9uc2VQYWNrZXQgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5cbmV4cG9ydCBjbGFzcyBIb3N0VHJhbnNwb3J0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIGltcGxlbWVudHMgSVBDVHJhbnNwb3J0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jUmVhZGVyOiBBc3luY1JlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFzeW5jV3JpdGVyOiBBc3luY1dyaXRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNSZWFkZXI6IEFzeW5jUmVhZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3luY1dyaXRlcjogQXN5bmNXcml0ZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlYWRlcnM6IEFzeW5jUmVhZGVyW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGlucHV0U3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0sIG91dHB1dFN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLCBzeW5jU3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0gJiBOb2RlSlMuV3JpdGFibGVTdHJlYW0pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmFzeW5jUmVhZGVyID0gbmV3IEFzeW5jUmVhZGVyKGlucHV0U3RyZWFtKTtcbiAgICAgICAgdGhpcy5hc3luY1dyaXRlciA9IG5ldyBBc3luY1dyaXRlcihvdXRwdXRTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMuc3luY1JlYWRlciA9IG5ldyBBc3luY1JlYWRlcihzeW5jU3RyZWFtKTtcbiAgICAgICAgdGhpcy5zeW5jV3JpdGVyID0gbmV3IEFzeW5jV3JpdGVyKHN5bmNTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMucmVhZGVycyA9IFt0aGlzLmFzeW5jUmVhZGVyLCB0aGlzLnN5bmNSZWFkZXJdO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWFkICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWFkZXJzLmZvckVhY2gocmVhZGVyID0+IHJlYWRlci5vbignZGF0YScsIGRhdGEgPT4gdGhpcy5lbWl0KCdkYXRhJywgZGF0YSkpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgd3JpdGUgKG1lc3NhZ2U6IElQQ1BhY2tldCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBtZXNzYWdlLnN5bmMgPyB0aGlzLnN5bmNXcml0ZXIgOiB0aGlzLmFzeW5jV3JpdGVyO1xuXG4gICAgICAgIGF3YWl0IHdyaXRlci53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZFN5bmMgKCk6IG5ldmVyIHtcbiAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5tZXRob2RJc05vdEF2YWlsYWJsZUZvckFuSVBDSG9zdCk7XG4gICAgfVxuXG4gICAgcHVibGljIHdyaXRlU3luYyAoKTogbmV2ZXIge1xuICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKFJVTlRJTUVfRVJST1JTLm1ldGhvZElzTm90QXZhaWxhYmxlRm9yQW5JUENIb3N0KTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFNlcnZpY2VUcmFuc3BvcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBJUENUcmFuc3BvcnQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNSZWFkZXI6IEFzeW5jUmVhZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNXcml0ZXI6IEFzeW5jV3JpdGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3luY1JlYWRlcjogU3luY1JlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNXcml0ZXI6IFN5bmNXcml0ZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGlucHV0U3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0sIG91dHB1dFN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLCBzeW5jRmQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIgPSBuZXcgQXN5bmNSZWFkZXIoaW5wdXRTdHJlYW0pO1xuICAgICAgICB0aGlzLmFzeW5jV3JpdGVyID0gbmV3IEFzeW5jV3JpdGVyKG91dHB1dFN0cmVhbSk7XG5cbiAgICAgICAgdGhpcy5zeW5jUmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoc3luY0ZkKTtcbiAgICAgICAgdGhpcy5zeW5jV3JpdGVyID0gbmV3IFN5bmNXcml0ZXIoc3luY0ZkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZCAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIub24oJ2RhdGEnLCBkYXRhID0+IHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgd3JpdGUgKG1lc3NhZ2U6IElQQ1BhY2tldCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmFzeW5jV3JpdGVyLndyaXRlKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWFkU3luYyAoKTogSVBDUmVzcG9uc2VQYWNrZXQge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5zeW5jUmVhZGVyLnJlYWRTeW5jKCk7XG5cbiAgICAgICAgaWYgKCFpc0lQQ1Jlc3BvbnNlUGFja2V0KG1lc3NhZ2UpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5tYWxmb3JtZWRJUENNZXNzYWdlKTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd3JpdGVTeW5jIChtZXNzYWdlOiBJUENQYWNrZXQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zeW5jV3JpdGVyLndyaXRlU3luYyhtZXNzYWdlKTtcbiAgICB9XG59XG4iXX0=