"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
const type_1 = __importDefault(require("./type"));
const RAW_API_JS_EXPRESSION_TYPE = 'js-expr';
function isCommandRejectableByPageError(command) {
    return !isObservationCommand(command) && !isBrowserManipulationCommand(command) && !isServiceCommand(command) ||
        isResizeWindowCommand(command)
            && !isWindowSwitchingCommand(command);
}
exports.isCommandRejectableByPageError = isCommandRejectableByPageError;
function isClientFunctionCommand(command) {
    return command.type === type_1.default.executeClientFunction ||
        command.type === type_1.default.executeSelector;
}
function isObservationCommand(command) {
    return isClientFunctionCommand(command) ||
        command.type === type_1.default.wait ||
        command.type === type_1.default.assertion ||
        command.type === type_1.default.executeExpression;
}
function isWindowSwitchingCommand(command) {
    return command.type === type_1.default.switchToIframe || command.type === type_1.default.switchToMainWindow;
}
function canSetDebuggerBreakpointBeforeCommand(command) {
    return command.type !== type_1.default.debug && !isClientFunctionCommand(command) && !isServiceCommand(command);
}
exports.canSetDebuggerBreakpointBeforeCommand = canSetDebuggerBreakpointBeforeCommand;
function isScreenshotCommand(command) {
    return command.type === type_1.default.takeScreenshot ||
        command.type === type_1.default.takeElementScreenshot ||
        command.type === type_1.default.takeScreenshotOnFail;
}
exports.isScreenshotCommand = isScreenshotCommand;
function isResizeWindowCommand(command) {
    return command.type === type_1.default.resizeWindow ||
        command.type === type_1.default.resizeWindowToFitDevice ||
        command.type === type_1.default.maximizeWindow;
}
exports.isResizeWindowCommand = isResizeWindowCommand;
function isBrowserManipulationCommand(command) {
    return isScreenshotCommand(command) || isResizeWindowCommand(command);
}
exports.isBrowserManipulationCommand = isBrowserManipulationCommand;
function isServiceCommand(command) {
    return command.type === type_1.default.testDone ||
        command.type === type_1.default.showAssertionRetriesStatus ||
        command.type === type_1.default.hideAssertionRetriesStatus ||
        command.type === type_1.default.setBreakpoint ||
        command.type === type_1.default.takeScreenshotOnFail ||
        command.type === type_1.default.recorder;
}
exports.isServiceCommand = isServiceCommand;
function isExecutableInTopWindowOnly(command) {
    return command.type === type_1.default.testDone ||
        command.type === type_1.default.switchToMainWindow ||
        command.type === type_1.default.setNativeDialogHandler ||
        command.type === type_1.default.getNativeDialogHistory ||
        command.type === type_1.default.setTestSpeed ||
        command.type === type_1.default.showAssertionRetriesStatus ||
        command.type === type_1.default.hideAssertionRetriesStatus ||
        command.type === type_1.default.setBreakpoint ||
        isBrowserManipulationCommand(command) && command.type !== type_1.default.takeElementScreenshot;
}
exports.isExecutableInTopWindowOnly = isExecutableInTopWindowOnly;
function isJSExpression(val) {
    return val !== null && typeof val === 'object' && val.type === RAW_API_JS_EXPRESSION_TYPE &&
        typeof val.value === 'string';
}
exports.isJSExpression = isJSExpression;
function isExecutableOnClientCommand(command) {
    return command.type !== type_1.default.wait &&
        command.type !== type_1.default.setPageLoadTimeout &&
        command.type !== type_1.default.debug &&
        command.type !== type_1.default.useRole &&
        command.type !== type_1.default.assertion &&
        command.type !== type_1.default.executeExpression &&
        command.type !== type_1.default.executeAsyncExpression;
}
exports.isExecutableOnClientCommand = isExecutableOnClientCommand;
//# sourceMappingURL=data:application/json;base64,