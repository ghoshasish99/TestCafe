"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const is_ci_1 = __importDefault(require("is-ci"));
const lodash_1 = require("lodash");
const make_dir_1 = __importDefault(require("make-dir"));
const os_family_1 = __importDefault(require("os-family"));
const testcafe_browser_tools_1 = require("testcafe-browser-tools");
const authentication_helper_1 = __importDefault(require("../cli/authentication-helper"));
const compiler_1 = __importDefault(require("../compiler"));
const connection_1 = __importDefault(require("../browser/connection"));
const pool_1 = __importDefault(require("../browser/provider/pool"));
const browser_set_1 = __importDefault(require("./browser-set"));
const remote_1 = __importDefault(require("../browser/provider/built-in/remote"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const tested_app_1 = __importDefault(require("./tested-app"));
const parse_file_list_1 = __importDefault(require("../utils/parse-file-list"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const load_1 = __importDefault(require("../custom-client-scripts/load"));
function isReporterPluginFactory(value) {
    return typeof value === 'function';
}
function isPromiseError(value) {
    return value.error !== void 0;
}
class Bootstrapper {
    constructor(browserConnectionGateway) {
        this.browserConnectionGateway = browserConnectionGateway;
        this.concurrency = 1;
        this.sources = [];
        this.browsers = [];
        this.reporters = [];
        this.filter = void 0;
        this.appCommand = void 0;
        this.appInitDelay = void 0;
        this.tsConfigPath = void 0;
        this.clientScripts = [];
        this.allowMultipleWindows = false;
    }
    static _getBrowserName(browser) {
        if (browser instanceof connection_1.default)
            return browser.browserInfo.browserName;
        return browser.browserName;
    }
    static _splitBrowserInfo(browserInfo) {
        const remotes = [];
        const automated = [];
        browserInfo.forEach(browser => {
            if (browser instanceof connection_1.default)
                remotes.push(browser);
            else
                automated.push(browser);
        });
        return { remotes, automated };
    }
    static async _hasLocalBrowsers(browserInfo) {
        for (const browser of browserInfo) {
            if (browser instanceof connection_1.default)
                continue;
            if (await browser.provider.isLocalBrowser(void 0, browser.browserName))
                return true;
        }
        return false;
    }
    static async _checkRequiredPermissions(browserInfo) {
        const hasLocalBrowsers = await Bootstrapper._hasLocalBrowsers(browserInfo);
        const { error } = await authentication_helper_1.default(() => testcafe_browser_tools_1.findWindow(''), testcafe_browser_tools_1.errors.UnableToAccessScreenRecordingAPIError, {
            interactive: hasLocalBrowsers && !is_ci_1.default
        });
        if (!error)
            return;
        if (hasLocalBrowsers)
            throw error;
        remote_1.default.canDetectLocalBrowsers = false;
    }
    async _getBrowserInfo() {
        if (!this.browsers.length)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.browserNotSet);
        const browserInfo = await Promise.all(this.browsers.map(browser => pool_1.default.getBrowserInfo(browser)));
        return lodash_1.flatten(browserInfo);
    }
    _createAutomatedConnections(browserInfo) {
        if (!browserInfo)
            return [];
        return browserInfo
            .map(browser => lodash_1.times(this.concurrency, () => new connection_1.default(this.browserConnectionGateway, browser, false, this.allowMultipleWindows)));
    }
    async _getBrowserConnections(browserInfo) {
        const { automated, remotes } = Bootstrapper._splitBrowserInfo(browserInfo);
        if (remotes && remotes.length % this.concurrency)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotDivideRemotesCountByConcurrency);
        let browserConnections = this._createAutomatedConnections(automated);
        browserConnections = browserConnections.concat(lodash_1.chunk(remotes, this.concurrency));
        return await browser_set_1.default.from(browserConnections);
    }
    _filterTests(tests, predicate) {
        return tests.filter(test => predicate(test.name, test.fixture.name, test.fixture.path, test.meta, test.fixture.meta));
    }
    async _getTests() {
        const { parsedFileList, compilerOptions } = await this._getCompilerArguments();
        if (!parsedFileList.length)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.testFilesNotFound);
        const compiler = new compiler_1.default(parsedFileList, compilerOptions);
        let tests = await compiler.getTests();
        const testsWithOnlyFlag = tests.filter(test => test.only);
        if (testsWithOnlyFlag.length)
            tests = testsWithOnlyFlag;
        if (this.filter)
            tests = this._filterTests(tests, this.filter);
        if (!tests.length)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.noTestsToRun);
        return tests;
    }
    async _getCompilerArguments() {
        const parsedFileList = await parse_file_list_1.default(this.sources, process.cwd());
        const compilerOptions = {
            typeScriptOptions: {
                tsConfigPath: this.tsConfigPath
            }
        };
        return { parsedFileList, compilerOptions };
    }
    async _ensureOutStream(outStream) {
        if (typeof outStream !== 'string')
            return outStream;
        const fullReporterOutputPath = resolve_path_relatively_cwd_1.default(outStream);
        await make_dir_1.default(path_1.default.dirname(fullReporterOutputPath));
        return fs_1.default.createWriteStream(fullReporterOutputPath);
    }
    static _addDefaultReporter(reporters) {
        reporters.push({
            name: 'spec',
            output: process.stdout
        });
    }
    _requireReporterPluginFactory(reporterName) {
        try {
            return require('testcafe-reporter-' + reporterName);
        }
        catch (err) {
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotFindReporterForAlias, reporterName);
        }
    }
    _getPluginFactory(reporterFactorySource) {
        if (!isReporterPluginFactory(reporterFactorySource))
            return this._requireReporterPluginFactory(reporterFactorySource);
        return reporterFactorySource;
    }
    async _getReporterPlugins() {
        const stdoutReporters = lodash_1.filter(this.reporters, r => lodash_1.isUndefined(r.output) || r.output === process.stdout);
        if (stdoutReporters.length > 1)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.multipleStdoutReporters, stdoutReporters.map(r => r.name).join(', '));
        if (!this.reporters.length)
            Bootstrapper._addDefaultReporter(this.reporters);
        return Promise.all(this.reporters.map(async ({ name, output }) => {
            const pluginFactory = this._getPluginFactory(name);
            const outStream = output ? await this._ensureOutStream(output) : void 0;
            return {
                plugin: pluginFactory(),
                outStream
            };
        }));
    }
    async _startTestedApp() {
        if (!this.appCommand)
            return void 0;
        const testedApp = new tested_app_1.default();
        await testedApp.start(this.appCommand, this.appInitDelay);
        return testedApp;
    }
    async _canUseParallelBootstrapping(browserInfo) {
        const isLocalPromises = browserInfo.map(browser => browser.provider.isLocalBrowser(void 0, Bootstrapper._getBrowserName(browser)));
        const isLocalBrowsers = await Promise.all(isLocalPromises);
        return isLocalBrowsers.every(result => result);
    }
    async _bootstrapSequence(browserInfo) {
        const tests = await this._getTests();
        const testedApp = await this._startTestedApp();
        const browserSet = await this._getBrowserConnections(browserInfo);
        return { tests, testedApp, browserSet };
    }
    _wrapBootstrappingPromise(promise) {
        return promise
            .then(result => ({ error: void 0, result }))
            .catch(error => ({ result: void 0, error }));
    }
    async _getBootstrappingError(browserSetStatus, testsStatus, testedAppStatus) {
        if (!isPromiseError(browserSetStatus))
            await browserSetStatus.result.dispose();
        if (!isPromiseError(browserSetStatus) && !isPromiseError(testedAppStatus) && testedAppStatus.result)
            await testedAppStatus.result.kill();
        if (isPromiseError(testsStatus))
            return testsStatus.error;
        if (isPromiseError(testedAppStatus))
            return testedAppStatus.error;
        if (isPromiseError(browserSetStatus))
            return browserSetStatus.error;
        return new Error('Unexpected call');
    }
    _getBootstrappingPromises(arg) {
        const result = {};
        for (const k in arg)
            result[k] = this._wrapBootstrappingPromise(arg[k]);
        return result;
    }
    async _bootstrapParallel(browserInfo) {
        const bootstrappingPromises = {
            browserSet: this._getBrowserConnections(browserInfo),
            tests: this._getTests(),
            app: this._startTestedApp()
        };
        const bootstrappingResultPromises = this._getBootstrappingPromises(bootstrappingPromises);
        const bootstrappingResults = await Promise.all([
            bootstrappingResultPromises.browserSet,
            bootstrappingResultPromises.tests,
            bootstrappingResultPromises.app
        ]);
        const [browserSetResults, testResults, appResults] = bootstrappingResults;
        if (isPromiseError(browserSetResults) || isPromiseError(testResults) || isPromiseError(appResults))
            throw await this._getBootstrappingError(...bootstrappingResults);
        return {
            browserSet: browserSetResults.result,
            tests: testResults.result,
            testedApp: appResults.result
        };
    }
    // API
    async createRunnableConfiguration() {
        const reporterPlugins = await this._getReporterPlugins();
        const commonClientScripts = await load_1.default(this.clientScripts);
        // NOTE: If a user forgot to specify a browser, but has specified a path to tests, the specified path will be
        // considered as the browser argument, and the tests path argument will have the predefined default value.
        // It's very ambiguous for the user, who might be confused by compilation errors from an unexpected test.
        // So, we need to retrieve the browser aliases and paths before tests compilation.
        const browserInfo = await this._getBrowserInfo();
        if (os_family_1.default.mac)
            await Bootstrapper._checkRequiredPermissions(browserInfo);
        if (await this._canUseParallelBootstrapping(browserInfo))
            return Object.assign(Object.assign({ reporterPlugins }, await this._bootstrapParallel(browserInfo)), { commonClientScripts });
        return Object.assign(Object.assign({ reporterPlugins }, await this._bootstrapSequence(browserInfo)), { commonClientScripts });
    }
}
exports.default = Bootstrapper;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,