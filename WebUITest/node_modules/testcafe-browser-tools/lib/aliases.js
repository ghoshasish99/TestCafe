"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const binaries_1 = __importDefault(require("./binaries"));
const ALIASES = {
    'ie': {
        nameRe: /iexplore|internet explorer/i,
        cmd: ''
    },
    'firefox': {
        nameRe: /firefox|mozilla/i,
        cmd: `-override "${path_1.default.join(__dirname, '../data/override.ini')}" -new-window`,
        macOpenCmdTemplate: 'open -a "{{{path}}}" {{{pageUrl}}} --args {{{cmd}}}',
        linuxBinaries: ['firefox']
    },
    'chrome-canary': {
        nameRe: /chrome\s*canary/i,
        cmd: '--disable-infobars --disable-session-crashed-bubble --no-first-run --new-window',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['google-chrome-canary']
    },
    'chrome': {
        nameRe: /chrome/i,
        cmd: '--disable-infobars --disable-session-crashed-bubble --no-first-run --new-window',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['google-chrome', 'google-chrome-stable', 'google-chrome-unstable']
    },
    'chromium': {
        nameRe: /chromium/i,
        cmd: '--disable-infobars --disable-session-crashed-bubble --no-first-run --new-window',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['chromium-browser', 'chromium']
    },
    'opera': {
        nameRe: /opera/i,
        cmd: '--new-window',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['opera']
    },
    'safari': {
        nameRe: /safari/i,
        cmd: '',
        path: binaries_1.default.app,
        macOpenCmdTemplate: `open -n -a "{{{path}}}" --args /dev/null open {{{pageUrl}}} {{{cmd}}}`
    },
    'edge': {
        nameRe: /edge/i,
        cmd: '',
        winOpenCmdTemplate: 'start microsoft-edge:"{{{pageUrl}}}"'
    }
};
exports.default = ALIASES;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hbGlhc2VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDBEQUFrQztBQUdsQyxNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRTtRQUNGLE1BQU0sRUFBRSw2QkFBNkI7UUFDckMsR0FBRyxFQUFLLEVBQUU7S0FDYjtJQUVELFNBQVMsRUFBRTtRQUNQLE1BQU0sRUFBYyxrQkFBa0I7UUFDdEMsR0FBRyxFQUFpQixjQUFjLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLGVBQWU7UUFDN0Ysa0JBQWtCLEVBQUUscURBQXFEO1FBQ3pFLGFBQWEsRUFBTyxDQUFDLFNBQVMsQ0FBQztLQUNsQztJQUVELGVBQWUsRUFBRTtRQUNiLE1BQU0sRUFBYyxrQkFBa0I7UUFDdEMsR0FBRyxFQUFpQixpRkFBaUY7UUFDckcsa0JBQWtCLEVBQUUsd0RBQXdEO1FBQzVFLGFBQWEsRUFBTyxDQUFDLHNCQUFzQixDQUFDO0tBQy9DO0lBRUQsUUFBUSxFQUFFO1FBQ04sTUFBTSxFQUFjLFNBQVM7UUFDN0IsR0FBRyxFQUFpQixpRkFBaUY7UUFDckcsa0JBQWtCLEVBQUUsd0RBQXdEO1FBQzVFLGFBQWEsRUFBTyxDQUFDLGVBQWUsRUFBRSxzQkFBc0IsRUFBRSx3QkFBd0IsQ0FBQztLQUMxRjtJQUVELFVBQVUsRUFBRTtRQUNSLE1BQU0sRUFBYyxXQUFXO1FBQy9CLEdBQUcsRUFBaUIsaUZBQWlGO1FBQ3JHLGtCQUFrQixFQUFFLHdEQUF3RDtRQUM1RSxhQUFhLEVBQU8sQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUM7S0FDdkQ7SUFFRCxPQUFPLEVBQUU7UUFDTCxNQUFNLEVBQWMsUUFBUTtRQUM1QixHQUFHLEVBQWlCLGNBQWM7UUFDbEMsa0JBQWtCLEVBQUUsd0RBQXdEO1FBQzVFLGFBQWEsRUFBTyxDQUFDLE9BQU8sQ0FBQztLQUNoQztJQUVELFFBQVEsRUFBRTtRQUNOLE1BQU0sRUFBYyxTQUFTO1FBQzdCLEdBQUcsRUFBaUIsRUFBRTtRQUN0QixJQUFJLEVBQWdCLGtCQUFRLENBQUMsR0FBRztRQUNoQyxrQkFBa0IsRUFBRSx1RUFBdUU7S0FDOUY7SUFFRCxNQUFNLEVBQUU7UUFDSixNQUFNLEVBQWMsT0FBTztRQUMzQixHQUFHLEVBQWlCLEVBQUU7UUFDdEIsa0JBQWtCLEVBQUUsc0NBQXNDO0tBQzdEO0NBQ0osQ0FBQztBQUVGLGtCQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4vYmluYXJpZXMnO1xuXG5cbmNvbnN0IEFMSUFTRVMgPSB7XG4gICAgJ2llJzoge1xuICAgICAgICBuYW1lUmU6IC9pZXhwbG9yZXxpbnRlcm5ldCBleHBsb3Jlci9pLFxuICAgICAgICBjbWQ6ICAgICcnXG4gICAgfSxcblxuICAgICdmaXJlZm94Jzoge1xuICAgICAgICBuYW1lUmU6ICAgICAgICAgICAgIC9maXJlZm94fG1vemlsbGEvaSxcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICBgLW92ZXJyaWRlIFwiJHtwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vZGF0YS9vdmVycmlkZS5pbmknKX1cIiAtbmV3LXdpbmRvd2AsXG4gICAgICAgIG1hY09wZW5DbWRUZW1wbGF0ZTogJ29wZW4gLWEgXCJ7e3twYXRofX19XCIge3t7cGFnZVVybH19fSAtLWFyZ3Mge3t7Y21kfX19JyxcbiAgICAgICAgbGludXhCaW5hcmllczogICAgICBbJ2ZpcmVmb3gnXVxuICAgIH0sXG5cbiAgICAnY2hyb21lLWNhbmFyeSc6IHtcbiAgICAgICAgbmFtZVJlOiAgICAgICAgICAgICAvY2hyb21lXFxzKmNhbmFyeS9pLFxuICAgICAgICBjbWQ6ICAgICAgICAgICAgICAgICctLWRpc2FibGUtaW5mb2JhcnMgLS1kaXNhYmxlLXNlc3Npb24tY3Jhc2hlZC1idWJibGUgLS1uby1maXJzdC1ydW4gLS1uZXctd2luZG93JyxcbiAgICAgICAgbWFjT3BlbkNtZFRlbXBsYXRlOiAnb3BlbiAtbiAtYSBcInt7e3BhdGh9fX1cIiAtLWFyZ3Mge3t7cGFnZVVybH19fSB7e3tjbWR9fX0nLFxuICAgICAgICBsaW51eEJpbmFyaWVzOiAgICAgIFsnZ29vZ2xlLWNocm9tZS1jYW5hcnknXVxuICAgIH0sXG5cbiAgICAnY2hyb21lJzoge1xuICAgICAgICBuYW1lUmU6ICAgICAgICAgICAgIC9jaHJvbWUvaSxcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICAnLS1kaXNhYmxlLWluZm9iYXJzIC0tZGlzYWJsZS1zZXNzaW9uLWNyYXNoZWQtYnViYmxlIC0tbm8tZmlyc3QtcnVuIC0tbmV3LXdpbmRvdycsXG4gICAgICAgIG1hY09wZW5DbWRUZW1wbGF0ZTogJ29wZW4gLW4gLWEgXCJ7e3twYXRofX19XCIgLS1hcmdzIHt7e3BhZ2VVcmx9fX0ge3t7Y21kfX19JyxcbiAgICAgICAgbGludXhCaW5hcmllczogICAgICBbJ2dvb2dsZS1jaHJvbWUnLCAnZ29vZ2xlLWNocm9tZS1zdGFibGUnLCAnZ29vZ2xlLWNocm9tZS11bnN0YWJsZSddXG4gICAgfSxcblxuICAgICdjaHJvbWl1bSc6IHtcbiAgICAgICAgbmFtZVJlOiAgICAgICAgICAgICAvY2hyb21pdW0vaSxcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICAnLS1kaXNhYmxlLWluZm9iYXJzIC0tZGlzYWJsZS1zZXNzaW9uLWNyYXNoZWQtYnViYmxlIC0tbm8tZmlyc3QtcnVuIC0tbmV3LXdpbmRvdycsXG4gICAgICAgIG1hY09wZW5DbWRUZW1wbGF0ZTogJ29wZW4gLW4gLWEgXCJ7e3twYXRofX19XCIgLS1hcmdzIHt7e3BhZ2VVcmx9fX0ge3t7Y21kfX19JyxcbiAgICAgICAgbGludXhCaW5hcmllczogICAgICBbJ2Nocm9taXVtLWJyb3dzZXInLCAnY2hyb21pdW0nXVxuICAgIH0sXG5cbiAgICAnb3BlcmEnOiB7XG4gICAgICAgIG5hbWVSZTogICAgICAgICAgICAgL29wZXJhL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgJy0tbmV3LXdpbmRvdycsXG4gICAgICAgIG1hY09wZW5DbWRUZW1wbGF0ZTogJ29wZW4gLW4gLWEgXCJ7e3twYXRofX19XCIgLS1hcmdzIHt7e3BhZ2VVcmx9fX0ge3t7Y21kfX19JyxcbiAgICAgICAgbGludXhCaW5hcmllczogICAgICBbJ29wZXJhJ11cbiAgICB9LFxuXG4gICAgJ3NhZmFyaSc6IHtcbiAgICAgICAgbmFtZVJlOiAgICAgICAgICAgICAvc2FmYXJpL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgJycsXG4gICAgICAgIHBhdGg6ICAgICAgICAgICAgICAgQklOQVJJRVMuYXBwLFxuICAgICAgICBtYWNPcGVuQ21kVGVtcGxhdGU6IGBvcGVuIC1uIC1hIFwie3t7cGF0aH19fVwiIC0tYXJncyAvZGV2L251bGwgb3BlbiB7e3twYWdlVXJsfX19IHt7e2NtZH19fWBcbiAgICB9LFxuXG4gICAgJ2VkZ2UnOiB7XG4gICAgICAgIG5hbWVSZTogICAgICAgICAgICAgL2VkZ2UvaSxcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgd2luT3BlbkNtZFRlbXBsYXRlOiAnc3RhcnQgbWljcm9zb2Z0LWVkZ2U6XCJ7e3twYWdlVXJsfX19XCInXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQUxJQVNFUztcbiJdfQ==