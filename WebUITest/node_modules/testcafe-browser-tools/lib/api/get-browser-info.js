"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const array_find_1 = __importDefault(require("array-find"));
const get_installations_1 = __importDefault(require("./get-installations"));
const fs_exists_promised_1 = __importDefault(require("../utils/fs-exists-promised"));
const aliases_1 = __importDefault(require("../aliases"));
//Const
const DEFAULT_ALIAS = {
    cmd: '',
    macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}}'
};
//API
/**
 * Returns information about the specified browser.
 * @function
 * @async
 * @name getBrowserInfo
 * @param {string} browser - A browser alias ('chrome', 'firefox', etc.) or a path to the browser's executable file.
 * @returns {BrowserInfo} An object that contains information about the specified browser.
 */
async function default_1(browser) {
    var installations = await get_installations_1.default();
    var browserAsAlias = browser.trim().toLowerCase();
    if (installations[browserAsAlias])
        return installations[browserAsAlias];
    var fileExists = await fs_exists_promised_1.default(browser);
    if (!fileExists)
        return null;
    var detectedAlias = array_find_1.default(Object.keys(aliases_1.default), alias => aliases_1.default[alias].nameRe.test(browser));
    var { cmd, macOpenCmdTemplate } = detectedAlias ? aliases_1.default[detectedAlias] : DEFAULT_ALIAS;
    return { path: browser, cmd, macOpenCmdTemplate };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWJyb3dzZXItaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvZ2V0LWJyb3dzZXItaW5mby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUE4QjtBQUM5Qiw0RUFBbUQ7QUFDbkQscUZBQWlEO0FBQ2pELHlEQUFpQztBQUdqQyxPQUFPO0FBQ1AsTUFBTSxhQUFhLEdBQUc7SUFDbEIsR0FBRyxFQUFpQixFQUFFO0lBQ3RCLGtCQUFrQixFQUFFLDhDQUE4QztDQUNyRSxDQUFDO0FBR0YsS0FBSztBQUNMOzs7Ozs7O0dBT0c7QUFDWSxLQUFLLG9CQUFXLE9BQU87SUFDbEMsSUFBSSxhQUFhLEdBQUcsTUFBTSwyQkFBZ0IsRUFBRSxDQUFDO0lBRTdDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVsRCxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUM7UUFDN0IsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFekMsSUFBSSxVQUFVLEdBQUcsTUFBTSw0QkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZDLElBQUksQ0FBQyxVQUFVO1FBQ1gsT0FBTyxJQUFJLENBQUM7SUFFaEIsSUFBSSxhQUFhLEdBQUcsb0JBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLGlCQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRTdGLElBQUksRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLGlCQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUV6RixPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztBQUN0RCxDQUFDO0FBbEJELDRCQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaW5kIGZyb20gJ2FycmF5LWZpbmQnO1xuaW1wb3J0IGdldEluc3RhbGxhdGlvbnMgZnJvbSAnLi9nZXQtaW5zdGFsbGF0aW9ucyc7XG5pbXBvcnQgZXhpc3RzIGZyb20gJy4uL3V0aWxzL2ZzLWV4aXN0cy1wcm9taXNlZCc7XG5pbXBvcnQgQUxJQVNFUyBmcm9tICcuLi9hbGlhc2VzJztcblxuXG4vL0NvbnN0XG5jb25zdCBERUZBVUxUX0FMSUFTID0ge1xuICAgIGNtZDogICAgICAgICAgICAgICAgJycsXG4gICAgbWFjT3BlbkNtZFRlbXBsYXRlOiAnb3BlbiAtbiAtYSBcInt7e3BhdGh9fX1cIiAtLWFyZ3Mge3t7cGFnZVVybH19fSdcbn07XG5cblxuLy9BUElcbi8qKlxuICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3BlY2lmaWVkIGJyb3dzZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhc3luY1xuICogQG5hbWUgZ2V0QnJvd3NlckluZm9cbiAqIEBwYXJhbSB7c3RyaW5nfSBicm93c2VyIC0gQSBicm93c2VyIGFsaWFzICgnY2hyb21lJywgJ2ZpcmVmb3gnLCBldGMuKSBvciBhIHBhdGggdG8gdGhlIGJyb3dzZXIncyBleGVjdXRhYmxlIGZpbGUuXG4gKiBAcmV0dXJucyB7QnJvd3NlckluZm99IEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcGVjaWZpZWQgYnJvd3Nlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKGJyb3dzZXIpIHtcbiAgICB2YXIgaW5zdGFsbGF0aW9ucyA9IGF3YWl0IGdldEluc3RhbGxhdGlvbnMoKTtcblxuICAgIHZhciBicm93c2VyQXNBbGlhcyA9IGJyb3dzZXIudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoaW5zdGFsbGF0aW9uc1ticm93c2VyQXNBbGlhc10pXG4gICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25zW2Jyb3dzZXJBc0FsaWFzXTtcblxuICAgIHZhciBmaWxlRXhpc3RzID0gYXdhaXQgZXhpc3RzKGJyb3dzZXIpO1xuXG4gICAgaWYgKCFmaWxlRXhpc3RzKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHZhciBkZXRlY3RlZEFsaWFzID0gZmluZChPYmplY3Qua2V5cyhBTElBU0VTKSwgYWxpYXMgPT4gQUxJQVNFU1thbGlhc10ubmFtZVJlLnRlc3QoYnJvd3NlcikpO1xuXG4gICAgdmFyIHsgY21kLCBtYWNPcGVuQ21kVGVtcGxhdGUgfSA9IGRldGVjdGVkQWxpYXMgPyBBTElBU0VTW2RldGVjdGVkQWxpYXNdIDogREVGQVVMVF9BTElBUztcblxuICAgIHJldHVybiB7IHBhdGg6IGJyb3dzZXIsIGNtZCwgbWFjT3BlbkNtZFRlbXBsYXRlIH07XG59XG4iXX0=