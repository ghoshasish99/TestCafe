"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const ensure_directory_1 = __importDefault(require("../utils/ensure-directory"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
const DEFAULT_THUMBNAIL_WIDTH = 240;
const DEFAULT_THUMBNAIL_HEIGHT = 130;
function getThumbnailPath(imagePath) {
    var imageName = path_1.default.basename(imagePath);
    var imageDir = path_1.default.dirname(imagePath);
    return path_1.default.join(imageDir, 'thumbnails', imageName);
}
/**
 * Creates a thumbnail image from the specified PNG image file.
 * @function
 * @async
 * @name generateThumbnail
 * @param {string} sourcePath - Specifies the path to the source image in PNG format.
 * @param {string} thumbnailPath - Specifies the path to the resulting thumbnail image.
 *                                 Defaults to '<sourcePathDirectory>/thumbnails/<sourcePathFileName>'
 * @param {number} width - Specifies the width of the thumbnail image, in pixels (default is 240).
 * @param {number} height - Specifies the height of the thumbnail image, in pixels (default is 130).
 */
async function default_1(sourcePath, thumbnailPath = getThumbnailPath(sourcePath), width = DEFAULT_THUMBNAIL_WIDTH, height = DEFAULT_THUMBNAIL_HEIGHT) {
    if (!await ensure_directory_1.default(thumbnailPath))
        return;
    await exec_1.execFile(binaries_1.default.generateThumbnail, [sourcePath, thumbnailPath, width, height]);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtdGh1bWJuYWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9nZW5lcmF0ZS10aHVtYm5haWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsaUZBQXdEO0FBQ3hELHdDQUF5QztBQUN6QywyREFBbUM7QUFHbkMsTUFBTSx1QkFBdUIsR0FBSSxHQUFHLENBQUM7QUFDckMsTUFBTSx3QkFBd0IsR0FBRyxHQUFHLENBQUM7QUFFckMsU0FBUyxnQkFBZ0IsQ0FBRSxTQUFTO0lBQ2hDLElBQUksU0FBUyxHQUFHLGNBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsSUFBSSxRQUFRLEdBQUksY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV4QyxPQUFPLGNBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNZLEtBQUssb0JBQVcsVUFBVSxFQUNWLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFDNUMsS0FBSyxHQUFHLHVCQUF1QixFQUMvQixNQUFNLEdBQUcsd0JBQXdCO0lBQzVELElBQUksQ0FBQyxNQUFNLDBCQUFlLENBQUMsYUFBYSxDQUFDO1FBQ3JDLE9BQU87SUFFWCxNQUFNLGVBQVEsQ0FBQyxrQkFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBUkQsNEJBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBlbnN1cmVEaXJlY3RvcnkgZnJvbSAnLi4vdXRpbHMvZW5zdXJlLWRpcmVjdG9yeSc7XG5pbXBvcnQgeyBleGVjRmlsZSB9IGZyb20gJy4uL3V0aWxzL2V4ZWMnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4uL2JpbmFyaWVzJztcblxuXG5jb25zdCBERUZBVUxUX1RIVU1CTkFJTF9XSURUSCAgPSAyNDA7XG5jb25zdCBERUZBVUxUX1RIVU1CTkFJTF9IRUlHSFQgPSAxMzA7XG5cbmZ1bmN0aW9uIGdldFRodW1ibmFpbFBhdGggKGltYWdlUGF0aCkge1xuICAgIHZhciBpbWFnZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGltYWdlUGF0aCk7XG4gICAgdmFyIGltYWdlRGlyICA9IHBhdGguZGlybmFtZShpbWFnZVBhdGgpO1xuXG4gICAgcmV0dXJuIHBhdGguam9pbihpbWFnZURpciwgJ3RodW1ibmFpbHMnLCBpbWFnZU5hbWUpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHVtYm5haWwgaW1hZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIFBORyBpbWFnZSBmaWxlLlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIGdlbmVyYXRlVGh1bWJuYWlsXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlUGF0aCAtIFNwZWNpZmllcyB0aGUgcGF0aCB0byB0aGUgc291cmNlIGltYWdlIGluIFBORyBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGh1bWJuYWlsUGF0aCAtIFNwZWNpZmllcyB0aGUgcGF0aCB0byB0aGUgcmVzdWx0aW5nIHRodW1ibmFpbCBpbWFnZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gJzxzb3VyY2VQYXRoRGlyZWN0b3J5Pi90aHVtYm5haWxzLzxzb3VyY2VQYXRoRmlsZU5hbWU+J1xuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gU3BlY2lmaWVzIHRoZSB3aWR0aCBvZiB0aGUgdGh1bWJuYWlsIGltYWdlLCBpbiBwaXhlbHMgKGRlZmF1bHQgaXMgMjQwKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBTcGVjaWZpZXMgdGhlIGhlaWdodCBvZiB0aGUgdGh1bWJuYWlsIGltYWdlLCBpbiBwaXhlbHMgKGRlZmF1bHQgaXMgMTMwKS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKHNvdXJjZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsUGF0aCA9IGdldFRodW1ibmFpbFBhdGgoc291cmNlUGF0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBERUZBVUxUX1RIVU1CTkFJTF9XSURUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBERUZBVUxUX1RIVU1CTkFJTF9IRUlHSFQpIHtcbiAgICBpZiAoIWF3YWl0IGVuc3VyZURpcmVjdG9yeSh0aHVtYm5haWxQYXRoKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgZXhlY0ZpbGUoQklOQVJJRVMuZ2VuZXJhdGVUaHVtYm5haWwsIFtzb3VyY2VQYXRoLCB0aHVtYm5haWxQYXRoLCB3aWR0aCwgaGVpZ2h0XSk7XG59XG4iXX0=